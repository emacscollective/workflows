#!/bin/sh
":"; exec emacs -Q --script "$0" -- "$@" # -*- mode: emacs-lisp; lexical-binding: t; -*-

(load (expand-file-name "../../lib/common" load-file-name))

(defvar get-from-gnu-elpa
  '(;; Backports for older Emacs releases.
    "cl-generic" "cl-lib" "nadvice" "seq"
    ;; Other packages distributed on GNU Elpa for older Emacs releases,
    ;; which the Emacsmirror does not mirror.
    "peg"))

(defun main ()
  (let ((file (expand-file-name "default.mk"))
        (urls (url-retrieve-synchronously
               "https://emacsmirror.net/stats/upstreams.html")))
    (unless (file-exists-p file)
      (setq file (expand-file-name "Makefile")))
    (with-temp-buffer
      (insert-file-contents file)
      (while (re-search-forward "^DEPS +\\+?= +\\([^/\n]+\\)" nil t)
        (let* ((dep (match-string 1)))
          (if (member dep get-from-gnu-elpa)
              (run "git" "clone" "--depth" "1"
                   "--single-branch" "--branch" (concat "externals/" dep)
                   "https://git.savannah.gnu.org/git/emacs/elpa.git"
                   (concat "../" dep))
            (let ((url (concat "https://github.com/emacsmirror/" dep)))
              (with-current-buffer urls
                (goto-char (point-min))
                (when (re-search-forward
                       (format "^<li>%s <a href=\"\\(.+\\)\">" dep)
                       nil t)
                  (setq url (match-string 1))))
              (run "git" "clone" "--depth" "1" url (concat "../" dep)))))))))

(kill-emacs (catch 'return (prog1 0 (main))))
